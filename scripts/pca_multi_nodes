import numpy as np
import dask.array as da
from dask_ml.decomposition import PCA
from dask.distributed import Client
from pathlib import Path
import time
import resource
from datetime import datetime
import os
import sys

# Dodanie katalogu z modułem visualize (zakładam: common/visualizations.py)
sys.path.append(str(Path(__file__).resolve().parent.parent / "common"))
from visualizations import visualize

# Ścieżki
DATA_PATH = Path("data/embeddings_data/embeddings")
PCA_OUTPUT_PATH = Path("data/pca")
PCA_OUTPUT_PATH.mkdir(parents=True, exist_ok=True)

RESULTS_DIR = Path("results/pca_dask")
RESULTS_DIR.mkdir(parents=True, exist_ok=True)

# Dask client
client = Client()  # lub Client("adres:port") na klastrze
print("Dask dashboard:", client.dashboard_link)

# Wczytywanie danych
basis_np = np.load(DATA_PATH / 'basis.npz')['matrix']
X_np = (basis_np.T / basis_np.sum(axis=1)).T
X = da.from_array(X_np, chunks=(1000, -1))

# Pomiar czasu
wall_start = time.perf_counter()
cpu_start = resource.getrusage(resource.RUSAGE_SELF)

# PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X).compute()
explained_var = pca.explained_variance_ratio_.compute() * 100

# Koniec pomiaru
wall_end = time.perf_counter()
cpu_end = resource.getrusage(resource.RUSAGE_SELF)
utime = cpu_end.ru_utime - cpu_start.ru_utime
stime = cpu_end.ru_stime - cpu_start.ru_stime
wall_time = wall_end - wall_start
cpu_total = utime + stime

# Zapis wyników PCA
np.savez(PCA_OUTPUT_PATH / "X_pca.npz", X_pca=X_pca)
print(f"PCA embeddings saved to: {PCA_OUTPUT_PATH / 'X_pca.npz'}")

# Zapis informacji o czasie
with open(RESULTS_DIR / "pca_time.txt", "w") as f:
    f.write(f"[{datetime.now().isoformat()}] DASK PCA\n")
    f.write(f"Explained variance: {explained_var[0]:.2f}%, {explained_var[1]:.2f}%\n")
    f.write(f"Wall time: {wall_time:.2f} s\n")
    f.write(f"CPU times: user {utime:.2f} s, sys {stime:.2f} s, total {cpu_total:.2f} s\n")
    f.write(f"Points: {X_pca.shape[0]}, Dimensions: {X_pca.shape[1]}\n")
    f.write(f"Hostname: {os.uname().nodename}\n")

# Wizualizacja
visualize(X_2d=X_pca, method_name="pca_dask", out_dir=RESULTS_DIR)

print("DASK PCA zakończone. Embedding, logi i wykresy zapisane.")
